import 'package:model/src/importer.dart';

part 'shitaraba.g.dart';

class ShitarabaData {
  static final host = Communities.shitaraba.host;
  static const sub = 'jbbs';
  static const threadPath = 'bbs/rawmode.cgi';
  static const htmlPath = 'bbs/read.cgi';
  static final topUrl = 'rentalbbs.shitaraba.com';
  static String getThreadUrlPath(
      {required final String category,
      required final String boardId,
      required final String threadId}) {
    return 'bbs/rawmode.cgi/$category/$boardId/$threadId';
  }

  static String favoriteBoardStr({
    required final String category,
    required final String boardId,
  }) {
    return '$category/$boardId';
  }

  static Uri? _validate(final String url) {
    final replasedRaw = url.replaceAll('$threadPath/', '');
    final data = replasedRaw.replaceAll('$htmlPath/', '');
    final uri = Uri.tryParse(data);
    if (uri == null) {
      return null;
    }
    return uri;
  }

  static bool validateUrl(final String url) {
    final uri = _validate(url);
    if (uri == null) {
      return false;
    }
    final domain = '$sub.$host';
    if (uri.host != domain) {
      return false;
    }
    logger.d('shitaraba val: $uri');
    final path = uri.pathSegments;
    if (path.length < 2) {
      return false;
    }
    final category = categoryName(path.first);
    if (category.isEmpty) {
      return false;
    }
    final boardId = int.tryParse(path[1]);
    if (boardId == null) {
      return false;
    }
    return true;
  }

  static String? getCategoryFromUrl(final String url) {
    final uri = _validate(url);
    if (uri == null) {
      return null;
    }
    final path = uri.pathSegments;
    if (path.length < 2) {
      return null;
    }
    return path.first;
  }

  static String? getBoardIdFromUrl(final String url) {
    final uri = _validate(url);
    if (uri == null) {
      return null;
    }
    final path = uri.pathSegments;
    if (path.length < 2) {
      return null;
    }
    return path[1];
  }

  static String? getFavoriteStr(final String url) {
    final category = getCategoryFromUrl(url);
    final boardId = getBoardIdFromUrl(url);
    if (category != null && boardId != null) {
      return favoriteBoardStr(category: category, boardId: boardId);
    }
    return null;
  }

  static String categoryName(final String value) {
    switch (value) {
      case 'music':
        return 'Èü≥Ê•Ω/Ëä∏ËÉΩ/Ëä∏Ë°ì/„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥';
      case 'game':
        return '„Ç≤„Éº„É†/Âõ≤Á¢Å/Â∞ÜÊ£ã';
      case 'netgame':
        return '„Éç„ÉÉ„Éà„Ç≤„Éº„É†/„Ç™„É≥„É©„Ç§„É≥„Ç≤„Éº„É†';
      case 'computer':
        return '„Ç≥„É≥„Éî„É•„Éº„Çø';
      case 'internet':
        return '„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà';
      case 'sports':
        return '„Çπ„Éù„Éº„ÉÑ/Ë∂£Âë≥/ÂÅ•Â∫∑';
      case 'otaku':
        return 'Âêå‰∫∫/„Ç≥„Éü„Ç±/‰∫åÊ¨°Ââµ‰Ωú';
      case 'travel':
        return 'ÊóÖË°å/Âú∞Âüü';
      case 'school':
        return 'Â≠¶Ê†°/ÂèóÈ®ì/Â≠¶Áîü„Ç≥„Éü„É•„Éã„ÉÜ„Ç£';
      case 'movie':
        return 'Êò†Áîª/„ÉÜ„É¨„Éì/Êú¨/„Çµ„Éñ„Ç´„É´';
      case 'anime':
        return '„Ç¢„Éã„É°/„Ç¢„Éã„É°„Ç∞„ÉÉ„Ç∫';
      case 'comic':
        return '„Éû„É≥„Ç¨';
      case 'business':
        return '„Éì„Ç∏„Éç„Çπ/ÁµåÊ∏à';
      case 'auto':
        return 'Ëá™ÂãïËªä/„Éê„Ç§„ÇØ/‰πó„ÇäÁâ©';
      case 'study':
        return 'Â≠¶Âïè/‰∫∫Êñá/ÁßëÂ≠¶';
      case 'news':
        return '„Éã„É•„Éº„Çπ/„Éû„Çπ„É°„Éá„Ç£„Ç¢/ÊîøÊ≤ª';
      case 'shop':
        return '„Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞/ÊµÅÈÄö';
      case 'radio':
        return '„É©„Ç∏„Ç™/„Éç„ÉÉ„Éà„É©„Ç∏„Ç™';
      case 'r18':
        return '„Ç¢„ÉÄ„É´„Éà';
      default:
        return '';
    }
  }

  static String categoryEmoji(final String value) {
    switch (value) {
      case 'music':
        return 'üé§';
      case 'game':
        return 'üéÆ';
      case 'netgame':
        return 'üïπÔ∏è';
      case 'computer':
        return 'üíªÔ∏è';
      case 'internet':
        return 'üì±';
      case 'sports':
        return '‚öΩ';
      case 'otaku':
        return 'üë©‚Äçüé®';
      case 'travel':
        return 'üõ©Ô∏è';
      case 'school':
        return 'üè´';
      case 'movie':
        return 'üéûÔ∏è';
      case 'anime':
        return 'üì∫Ô∏è';
      case 'comic':
        return 'üé®';
      case 'business':
        return 'üìà';
      case 'auto':
        return 'üöó';
      case 'study':
        return 'üë©‚Äçüéì';
      case 'news':
        return 'üë©‚Äçüè´';
      case 'shop':
        return 'üè¨';
      case 'radio':
        return 'üìª';
      case 'r18':
        return 'üîû';
      default:
        return '';
    }
  }
}

@JsonSerializable(explicitToJson: true)
@CopyWith()
@immutable
class ShitarabaCategoryData {
  const ShitarabaCategoryData({
    required this.id,
    // this.boards = const []
  });
  final String id;
  // final List<BoardData?> boards;

  factory ShitarabaCategoryData.fromJson(Map<String, dynamic> json) =>
      _$ShitarabaCategoryDataFromJson(json);

  Map<String, dynamic> toJson() => _$ShitarabaCategoryDataToJson(this);
}

@JsonSerializable(explicitToJson: true)
@CopyWith()
@immutable
class ShitarabaBoardData {
  const ShitarabaBoardData(
      {required this.id,
      required this.category,
      required this.name,
      required this.sub});
  final String id;
  final String category;
  final String name;
  final String sub;

  factory ShitarabaBoardData.fromJson(Map<String, dynamic> json) =>
      _$ShitarabaBoardDataFromJson(json);

  Map<String, dynamic> toJson() => _$ShitarabaBoardDataToJson(this);
}

@CopyWith()
@immutable
class ShitarabaThreadData extends ThreadData with WithDateTime {
  const ShitarabaThreadData(
      {required super.id,
      required super.title,
      required super.resCount,
      required super.boardId,
      required super.type,
      required super.url,
      // super.difference,
      super.boardName,
      super.isNewPost,
      required super.updateAtStr});

  @override
  String? get thumbnailUrl => null;

  @override
  DateTime? get dateTime {
    final datetime = int.tryParse(id) ?? 0;
    // logger.d('datetime: machi: $datetime, id: $id');
    return DateTime.fromMillisecondsSinceEpoch(datetime * 1000);
  }

  @override
  double get ikioi {
    if (resCount == -1) {
      return -1.0;
    }
    return getIkioi(int.tryParse(id) ?? 0, resCount);
  }
}

@JsonSerializable()
@CopyWith()
@immutable
class ShitarabaContentData extends ContentData with WithDateTime {
  const ShitarabaContentData(
      {required super.index,
      required super.name,
      this.email,
      // required this.dateAndId,
      required super.body,
      super.title,
      super.urlSet,
      required this.category,
      required this.boardId,
      required this.id,
      required this.date,
      // required this.domain,
      // required this.directoryName,
      super.userId});
  // final String name;
  final String? email;
  final String category;
  final String boardId;
  final String id;
  final String date;

  @override
  DateTime? get createdAt {
    try {
      final splited = date.split(' ');
      final first = splited.first.substring(0, date.indexOf('('));
      return getDateTime(first, splited[1]);
    } catch (e) {
      logger.e('shitaraba: createdAt: $e');
    }
    return null;
  }

  @override
  String? get getPostId {
    // final splited = dateAndId.split(' ');
    // if (splited.length > 2) {
    //   final id = splited[2];
    //   final subtring = id.length > 3 ? id.substring(3) : '';
    //   // if(subtring.endsWith('‚óè'))
    //   // logger.d('getId: splited: $splited, id:$id, sub:$subtring');

    //   return subtring == '???' ? null : subtring;
    // }
    return id;
  }

  String? get getUserTrip {
    if (name.contains('‚óÜ') && name.contains('<b>')) {
      return name.substring(name.indexOf('‚óÜ'), name.lastIndexOf('<b>'));
    }
    return null;
  }

  @override
  String? get getUserName {
    String result = name;
    if (name.contains('<b>')) {
      final replaceTrip = name.replaceAll('$getUserTrip', '');
      final rep = replaceTrip.replaceAll('</b>', '');
      final re = rep.replaceAll('<b>', '');
      final r = re.trim();
      result = '$r $getUserTrip';
    }
    return result;
  }

  @override
  String? get getUserId => userId;

  @override
  Set<String?> get anchorList {
    final list = RegExp(r'>>[0-9]+').allMatches(body).toSet();
    // logger.d('anchor: ${list}');
    return list.map((e) => e.group(0)).toSet();
  }

  factory ShitarabaContentData.fromJson(Map<String, dynamic> json) =>
      _$ShitarabaContentDataFromJson(json);
  Map<String, dynamic> toJson() => _$ShitarabaContentDataToJson(this);
}
